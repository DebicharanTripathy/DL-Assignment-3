# -*- coding: utf-8 -*-
"""DLAssignment3Question2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16CfWr0WNXqNNOR7H9CGe4BFAFh9nwKTi
"""

#Author: Debicharan Tripathy
#Roll No : M22ai545
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from torch.utils.data import DataLoader, TensorDataset
import scipy.io

# Load the Frey Face dataset
data = scipy.io.loadmat('frey_rawface.mat')
X = data['ff'].T.astype('float32')
num_samples, input_dim = X.shape

# Make the data normalised to [0, 1]
X /= 255.0

# To PyTorch Tensor conversion
X_tensor = torch.from_numpy(X)

# Create a random seed for consistency
torch.manual_seed(42)

# If a GPU is available, select it; otherwise, select a CPU.
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# The Variational Autoencoder (VAE) architecture is defined.
class VAE(nn.Module):
    def __init__(self, input_dim, hidden_dim, latent_dim):
        super(VAE, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(input_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, latent_dim * 2)  # Two times latent_dim for mean and variance
        )
        self.decoder = nn.Sequential(
            nn.Linear(latent_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, input_dim),
            nn.Sigmoid()
        )
        self.latent_dim = latent_dim

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5*logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def forward(self, x):
        # Encoding
        latent_params = self.encoder(x)
        mu, logvar = torch.split(latent_params, self.latent_dim, dim=1)
        z = self.reparameterize(mu, logvar)

        # Decoding
        reconstruction = self.decoder(z)
        return reconstruction, mu, logvar

# Hyperparameters
embedding_size = 20
hidden_size = 256
learning_rate = 1e-3
batch_size = 64
num_epochs = 100

# Create DataLoader
dataset = TensorDataset(X_tensor)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

# Prepare the VAE model and optimizer for use.
model = VAE(input_dim, hidden_size, embedding_size).to(device)
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# Loss function for VAE (consisting of KL divergence and reconstruction loss)
def vae_loss(reconstruction, x, mu, logvar):
    reconstruction_loss = nn.functional.binary_cross_entropy(reconstruction, x, reduction='sum')
    kl_divergence = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())
    return reconstruction_loss + kl_divergence

# Training loop
for epoch in range(num_epochs):
    model.train()
    total_loss = 0

    for batch in dataloader:
        batch = batch[0].to(device)
        optimizer.zero_grad()
        reconstruction, mu, logvar = model(batch)
        loss = vae_loss(reconstruction, batch, mu, logvar)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()

    print(f"Epoch {epoch + 1}/{num_epochs}, Loss: {total_loss / len(dataset)}")

# selecting samples from the learnt distribution while adjusting various latent factors
model.eval()

# Make a grid of values for the latent variable.
num_samples_per_dimension = 10
latent_samples = torch.randn(num_samples_per_dimension**2, embedding_size).to(device)

# By adjusting latent variables, produce samples from the decoder.
with torch.no_grad():
    generated_samples = model.decoder(latent_samples).cpu().numpy()

# Display the generated samples
import matplotlib.pyplot as plt

fig, axs = plt.subplots(num_samples_per_dimension, num_samples_per_dimension, figsize=(8, 8))
for i in range(num_samples_per_dimension):
    for j in range(num_samples_per_dimension):
        idx = i * num_samples_per_dimension + j
        sample = generated_samples[idx].reshape(28, 20)
        axs[i, j].imshow(sample, cmap='gray')
        axs[i, j].axis('off')
plt.show()